// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/AnthoniusHendriyanto/auth-service/internal/auth/domain (interfaces: UserRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/AnthoniusHendriyanto/auth-service/internal/auth/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CountRecentFailedAttempts mocks base method.
func (m *MockUserRepository) CountRecentFailedAttempts(email, ip string, withinMinutes int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRecentFailedAttempts", email, ip, withinMinutes)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountRecentFailedAttempts indicates an expected call of CountRecentFailedAttempts.
func (mr *MockUserRepositoryMockRecorder) CountRecentFailedAttempts(email, ip, withinMinutes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRecentFailedAttempts", reflect.TypeOf((*MockUserRepository)(nil).CountRecentFailedAttempts), email, ip, withinMinutes)
}

// Create mocks base method.
func (m *MockUserRepository) Create(user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryMockRecorder) Create(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), user)
}

// DeleteOldestByUserID mocks base method.
func (m *MockUserRepository) DeleteOldestByUserID(userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOldestByUserID", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOldestByUserID indicates an expected call of DeleteOldestByUserID.
func (mr *MockUserRepositoryMockRecorder) DeleteOldestByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOldestByUserID", reflect.TypeOf((*MockUserRepository)(nil).DeleteOldestByUserID), userID)
}

// GetActiveCountByUserID mocks base method.
func (m *MockUserRepository) GetActiveCountByUserID(userID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveCountByUserID", userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveCountByUserID indicates an expected call of GetActiveCountByUserID.
func (mr *MockUserRepositoryMockRecorder) GetActiveCountByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveCountByUserID", reflect.TypeOf((*MockUserRepository)(nil).GetActiveCountByUserID), userID)
}

// GetByEmail mocks base method.
func (m *MockUserRepository) GetByEmail(email string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", email)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUserRepositoryMockRecorder) GetByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetByEmail), email)
}

// GetByIDWithRole mocks base method.
func (m *MockUserRepository) GetByIDWithRole(userID string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDWithRole", userID)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDWithRole indicates an expected call of GetByIDWithRole.
func (mr *MockUserRepositoryMockRecorder) GetByIDWithRole(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDWithRole", reflect.TypeOf((*MockUserRepository)(nil).GetByIDWithRole), userID)
}

// GetRefreshToken mocks base method.
func (m *MockUserRepository) GetRefreshToken(token string) (*domain.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshToken", token)
	ret0, _ := ret[0].(*domain.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefreshToken indicates an expected call of GetRefreshToken.
func (mr *MockUserRepositoryMockRecorder) GetRefreshToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshToken", reflect.TypeOf((*MockUserRepository)(nil).GetRefreshToken), token)
}

// RecordLoginAttempt mocks base method.
func (m *MockUserRepository) RecordLoginAttempt(email, ip string, success bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordLoginAttempt", email, ip, success)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordLoginAttempt indicates an expected call of RecordLoginAttempt.
func (mr *MockUserRepositoryMockRecorder) RecordLoginAttempt(email, ip, success interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordLoginAttempt", reflect.TypeOf((*MockUserRepository)(nil).RecordLoginAttempt), email, ip, success)
}

// RevokeAllRefreshTokensByUserID mocks base method.
func (m *MockUserRepository) RevokeAllRefreshTokensByUserID(userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeAllRefreshTokensByUserID", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeAllRefreshTokensByUserID indicates an expected call of RevokeAllRefreshTokensByUserID.
func (mr *MockUserRepositoryMockRecorder) RevokeAllRefreshTokensByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAllRefreshTokensByUserID", reflect.TypeOf((*MockUserRepository)(nil).RevokeAllRefreshTokensByUserID), userID)
}

// RevokeRefreshToken mocks base method.
func (m *MockUserRepository) RevokeRefreshToken(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeRefreshToken", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeRefreshToken indicates an expected call of RevokeRefreshToken.
func (mr *MockUserRepositoryMockRecorder) RevokeRefreshToken(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeRefreshToken", reflect.TypeOf((*MockUserRepository)(nil).RevokeRefreshToken), id)
}

// StoreRefreshToken mocks base method.
func (m *MockUserRepository) StoreRefreshToken(rt *domain.RefreshToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreRefreshToken", rt)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreRefreshToken indicates an expected call of StoreRefreshToken.
func (mr *MockUserRepositoryMockRecorder) StoreRefreshToken(rt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreRefreshToken", reflect.TypeOf((*MockUserRepository)(nil).StoreRefreshToken), rt)
}

// UpsertTrustedDevice mocks base method.
func (m *MockUserRepository) UpsertTrustedDevice(userID, fingerprint, userAgent, ip string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertTrustedDevice", userID, fingerprint, userAgent, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertTrustedDevice indicates an expected call of UpsertTrustedDevice.
func (mr *MockUserRepositoryMockRecorder) UpsertTrustedDevice(userID, fingerprint, userAgent, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertTrustedDevice", reflect.TypeOf((*MockUserRepository)(nil).UpsertTrustedDevice), userID, fingerprint, userAgent, ip)
}
